version: "3.3"
services:
    mosaic-api:
        image: ryanjvanvoorhis/mosaic-api
        environment:
            - MONOGODB_URI=mongodb://mongodb:27017/
            - SECRET_KEY=${SECRET_KEY}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - FRONT_END_URL=http://localhost:8081
            - FAAS_URL=${FAAS_URL}
            - S3_ENDPOINT_URL=http://local-s3:80/
            - S3_EXTERNAL_URL=http://localhost:80
            - MOSAIC_API_URL_INTERNAL=http://mosaic-api:5000/api/v1/photomosaic
            - MOSAIC_API_URL_EXTERNAL=http://${BROADCAST_IP}:5000/api/v1/photomosaic
            - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        ports:
            - "5000:5000"
        networks:
            - functions


    ### DATA ###
    local-s3:
        user: root
        image: andrewgaul/s3proxy
        ports:
            - "80:80"
        environment:
            - S3PROXY_AUTHORIZATION=none
        volumes:
            - /opt/local_s3:/data
        networks:
          - functions

    mongodb:
        user: root
        image: 'bitnami/mongodb:latest'
        ports:
            - "27018:27017"
        volumes:
            - /opt/mongodb:/bitnami
        networks:
            - functions

    ### Open_FaaS ###
    gateway:
        ports:
            - 8080:8080
        image: openfaas/gateway:0.9.14
        networks:
            - functions
        environment:
            functions_provider_url: "http://faas-swarm:8080/"
            read_timeout:  "300s"        # Maximum time to read HTTP request
            write_timeout: "300s"        # Maximum time to write HTTP response
            upstream_timeout: "300s"     # Maximum duration of upstream function call - should be more than read_timeout and write_timeout
            dnsrr: "true"               # Temporarily use dnsrr in place of VIP while issue persists on PWD
            faas_nats_address: "nats"
            faas_nats_port: 4222
            direct_functions: "true"    # Functions are invoked directly over the overlay network
            direct_functions_suffix: ""
            basic_auth: "${BASIC_AUTH:-true}"
            secret_mount_path: "/run/secrets/"
            scale_from_zero: "true"
        deploy:
            resources:
                # limits:   # Enable if you want to limit memory usage
                #     memory: 200M
                reservations:
                    memory: 100M
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 20
                window: 380s
            placement:
                constraints:
                    - 'node.platform.os == linux'
        secrets:
            - basic-auth-user
            - basic-auth-password

    # Docker Swarm provider
    faas-swarm:
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        image:  openfaas/faas-swarm:0.6.1
        networks:
            - functions
        environment:
            read_timeout:  "300s"   # set both here, and on your functions
            write_timeout: "300s"   # set both here, and on your functions
            DOCKER_API_VERSION: "1.30"
            basic_auth: "${BASIC_AUTH:-true}"
            secret_mount_path: "/run/secrets/"
        deploy:
            placement:
                constraints:
                    - 'node.role == manager'
                    - 'node.platform.os == linux'
            resources:
                # limits:   # Enable if you want to limit memory usage
                #     memory: 100M
                #     memory: 100M
                reservations:
                    memory: 100M
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 20
                window: 380s
        secrets:
            - basic-auth-user
            - basic-auth-password

    nats:
        image: nats-streaming:0.11.2
        # Uncomment the following port mappings if you wish to expose the
        # NATS client and/or management ports you must also add `-m 8222` to the command
        # ports:
        #     - 4222:4222
        #     - 8222:8222
        command: "--store memory --cluster_id faas-cluster"
        networks:
            - functions
        deploy:
            resources:
                limits:
                    memory: 125M
                reservations:
                    memory: 50M
            placement:
                constraints:
                    - 'node.platform.os == linux'

    queue-worker:
        image: openfaas/queue-worker:0.5.4
        networks:
            - functions
        environment:
            max_inflight: "1"
            ack_wait: "300s"    # Max duration of any async task / request
            basic_auth: "${BASIC_AUTH:-true}"
            secret_mount_path: "/run/secrets/"
        deploy:
            resources:
                limits:
                    memory: 50M
                reservations:
                    memory: 20M
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 20
                window: 380s
            placement:
                constraints:
                    - 'node.platform.os == linux'
        secrets:
            - basic-auth-user
            - basic-auth-password

networks:
    functions:
        driver: overlay
        attachable: true
        labels:
          - "openfaas=true"

secrets:
    basic-auth-user:
        external: true
    basic-auth-password:
        external: true
